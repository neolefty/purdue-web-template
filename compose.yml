services:
  db:
    image: postgres:16-alpine
    environment:
      POSTGRES_DB: purdue_app
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    volumes:
      - ./backend:/app
    # Port not exposed - access via frontend proxy at localhost:5173
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - DJANGO_SETTINGS_MODULE=config.settings.development
      - DATABASE_ENGINE=postgresql
      - DB_NAME=purdue_app
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - DB_HOST=db
      - DB_PORT=5432
      - DEBUG=True
      - AUTH_METHOD=email
      - DEFAULT_SUPERUSER_PASSWORD=${DEFAULT_SUPERUSER_PASSWORD:-admin123}
      - REDIS_URL=redis://redis:6379/0
      - CORS_ALLOWED_ORIGINS=http://localhost:${FRONTEND_PORT:-5173}
      - CSRF_TRUSTED_ORIGINS=http://localhost:${FRONTEND_PORT:-5173}
      - FRONTEND_URL=http://localhost:${FRONTEND_PORT:-5173}
    healthcheck:
      test: ["CMD", "python", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:8000/api/health/').read()"]
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 30s
    stdin_open: true
    tty: true

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    volumes:
      - ./frontend:/app
      - /app/node_modules
    ports:
      - "${FRONTEND_PORT:-5173}:5173"
    depends_on:
      backend:
        condition: service_healthy
    environment:
      - NODE_ENV=development
    stdin_open: true
    tty: true

volumes:
  postgres_data:
