/**
 * Example test file for Dashboard component
 * Shows essential testing patterns for React components
 *
 * Note: Install testing dependencies first:
 * npm install --save-dev @testing-library/react @testing-library/user-event vitest
 */

import React from 'react';
import { render, screen, waitFor } from '@testing-library/react';
import userEvent from '@testing-library/user-event';
import { QueryClient, QueryClientProvider } from '@tanstack/react-query';
import { BrowserRouter } from 'react-router-dom';
import Dashboard from './Dashboard';
import { AuthProvider } from '../contexts/AuthContext';

// Helper to wrap component with required providers
const renderWithProviders = (component: React.ReactElement) => {
  const queryClient = new QueryClient({
    defaultOptions: {
      queries: { retry: false },
    },
  });

  return render(
    <BrowserRouter>
      <AuthProvider>
        <QueryClientProvider client={queryClient}>
          {component}
        </QueryClientProvider>
      </AuthProvider>
    </BrowserRouter>
  );
};

describe('Dashboard', () => {
  test('renders dashboard with welcome message', () => {
    renderWithProviders(<Dashboard />);
    expect(screen.getByText(/Welcome to Your Dashboard/i)).toBeInTheDocument();
  });

  test('displays user statistics', async () => {
    renderWithProviders(<Dashboard />);

    await waitFor(() => {
      expect(screen.getByText(/Total Items/i)).toBeInTheDocument();
    });
  });

  test('handles logout button click', async () => {
    const user = userEvent.setup();
    renderWithProviders(<Dashboard />);

    const logoutButton = screen.getByRole('button', { name: /logout/i });
    await user.click(logoutButton);

    // Add assertion based on your logout behavior
    expect(logoutButton).toBeInTheDocument();
  });
});
