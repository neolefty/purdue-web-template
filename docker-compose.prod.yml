services:
  # PostgreSQL Database (same as dev)
  db:
    image: postgres:15
    volumes:
      - postgres_prod_data:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: django_template_prod
      POSTGRES_USER: django_template_user
      POSTGRES_PASSWORD: productionpass123
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U django_template_user -d django_template_prod"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - prod-network

  # Backend with Gunicorn (production server)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
    volumes:
      - ./backend:/app
      - static_volume:/app/staticfiles
      - media_volume:/app/media
      - gunicorn_socket:/run
    environment:
      # Database
      DATABASE_ENGINE: postgresql
      DB_NAME: django_template_prod
      DB_USER: django_template_user
      DB_PASSWORD: productionpass123
      DB_HOST: db
      DB_PORT: 5432

      # Django settings
      DJANGO_SECRET_KEY: 'prod-secret-key-change-this-in-production'
      DEBUG: 'False'
      ALLOWED_HOSTS: 'localhost,127.0.0.1,django-template.local'
      DJANGO_SETTINGS_MODULE: 'config.settings.production'
      SECURE_SSL_REDIRECT: 'False'  # Disable for local testing

      # Auth
      AUTH_METHOD: email  # Change to 'saml' for Purdue SSO

      # CORS
      CORS_ALLOWED_ORIGINS: 'http://localhost,http://127.0.0.1,http://django-template.local,https://django-template.local'

      # Email (using console backend for testing)
      EMAIL_HOST: 'localhost'
      EMAIL_PORT: '1025'
      EMAIL_USE_TLS: 'False'
      EMAIL_HOST_USER: ''
      EMAIL_HOST_PASSWORD: ''
      DEFAULT_FROM_EMAIL: 'noreply@django-template.local'

      # Static files
      STATIC_ROOT: /app/staticfiles
      MEDIA_ROOT: /app/media
    command: >
      sh -c "
        echo 'Waiting for database...' &&
        while ! nc -z db 5432; do sleep 1; done &&
        echo 'Database is ready!' &&
        python manage.py migrate --noinput &&
        python manage.py collectstatic --noinput &&
        echo 'Starting Gunicorn with socket activation emulation...' &&
        gunicorn config.wsgi:application --bind unix:/run/gunicorn.sock --workers 2 --worker-class sync --timeout 30 --log-level info --access-logfile - --error-logfile - --user nginx --group nginx
      "
    depends_on:
      db:
        condition: service_healthy
    networks:
      - prod-network

  # Frontend build (static files only)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
    volumes:
      - frontend_build:/app/dist
    environment:
      VITE_API_URL: http://django-template.local
    networks:
      - prod-network

  # Nginx web server
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.prod.conf:/etc/nginx/conf.d/default.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - frontend_build:/usr/share/nginx/html:ro
      - static_volume:/usr/share/nginx/static:ro
      - media_volume:/usr/share/nginx/media:ro
      - gunicorn_socket:/var/run/gunicorn:ro
    depends_on:
      - backend
      - frontend
    networks:
      - prod-network
    extra_hosts:
      - "django-template.local:127.0.0.1"

volumes:
  postgres_prod_data:
  static_volume:
  media_volume:
  frontend_build:
  gunicorn_socket:

networks:
  prod-network:
    driver: bridge
